{"version":3,"sources":["Components/Header.jsx","App.jsx","serviceWorker.jsx","index.jsx"],"names":["Header","name","this","props","data","currentRole","occupation","description","networks","social","map","network","react_default","a","createElement","key","href","url","className","id","title","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","resumeData","Header_Header","main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEqBA,0LAET,IAAMC,EAAOC,KAAKC,MAAMC,KAAKH,MAAQ,GAC/BI,EAAcH,KAAKC,MAAMC,KAAKE,YAAc,GAC5CC,EAAcL,KAAKC,MAAMC,KAAKG,aAAe,GAC7CC,EAAWN,KAAKC,MAAMC,KAAKK,OAAOC,IACpC,SAAAC,GAAO,OAAIC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAQV,MAAMW,EAAAC,EAAAC,cAAA,KAAGE,KAAML,EAAQM,KAAKL,EAAAC,EAAAC,cAAA,KAAGI,UAAWP,EAAQO,iBAC7E,GAET,OACIN,EAAAC,EAAAC,cAAA,UAAQK,GAAG,QAETP,EAAAC,EAAAC,cAAA,OAAKK,GAAG,YAELP,EAAAC,EAAAC,cAAA,KAAGI,UAAU,aAAaF,KAAK,YAAYI,MAAM,mBAAjD,mBACCR,EAAAC,EAAAC,cAAA,KAAGI,UAAU,aAAaF,KAAK,QAAQI,MAAM,mBAA7C,mBAEDR,EAAAC,EAAAC,cAAA,MAAIK,GAAG,MAAMD,UAAU,OACpBN,EAAAC,EAAAC,cAAA,MAAII,UAAU,WAAUN,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAAeF,KAAK,SAAjC,SACxBJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAAeF,KAAK,UAAjC,UACHJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAAeF,KAAK,WAAjC,WACLJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAAeF,KAAK,cAAjC,aACJJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAAeF,KAAK,YAAjC,cAKVJ,EAAAC,EAAAC,cAAA,OAAKI,UAAU,cACZN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,eACZN,EAAAC,EAAAC,cAAA,MAAII,UAAU,uBAAd,OAAyCjB,EAAzC,KACAW,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,YAAOT,GAAX,KAAiCE,EAAjC,KACAK,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAII,UAAU,UACVV,KAKVI,EAAAC,EAAAC,cAAA,KAAGI,UAAU,cACVN,EAAAC,EAAAC,cAAA,KAAGI,UAAU,eAAeF,KAAK,UAASJ,EAAAC,EAAAC,cAAA,KAAGI,UAAU,+BAvCpCG,qBC2BrBC,cAlBX,SAAAA,EAAYnB,GAAM,IAAAoB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAtB,KAAAoB,IACdC,EAAAC,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA1B,KAAMC,KACD0B,MAAQ,CACTC,WAAYA,GAHFP,wEASlB,OACEX,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACXN,EAAAC,EAAAC,cAACiB,EAAD,CAAW3B,KAAMF,KAAK2B,MAAMC,WAAWE,eAZ/BX,aCEEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1fd24dba.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class Header extends Component{\n    render(){\n            const name = this.props.data.name || \"\";\n            const currentRole = this.props.data.occupation || \"\";\n            const description = this.props.data.description || \"\";\n            const networks = this.props.data.social.map(\n                network => <li key={network.name}><a href={network.url}><i className={network.className}></i></a></li>\n            ) || \"\";\n\n        return (\n            <header id=\"home\">\n\n              <nav id=\"nav-wrap\">\n\n                 <a className=\"mobile-btn\" href=\"#nav-wrap\" title=\"Show navigation\">Show navigation</a>\n                  <a className=\"mobile-btn\" href=\"#home\" title=\"Hide navigation\">Hide navigation</a>\n\n                 <ul id=\"nav\" className=\"nav\">\n                    <li className=\"current\"><a className=\"smoothscroll\" href=\"#home\">Home</a></li>\n                    <li><a className=\"smoothscroll\" href=\"#about\">About</a></li>\n                     <li><a className=\"smoothscroll\" href=\"#resume\">Resume</a></li>\n                    <li><a className=\"smoothscroll\" href=\"#portfolio\">Projects</a></li>\n                    <li><a className=\"smoothscroll\" href=\"#contact\">Contact</a></li>\n                 </ul>\n\n              </nav>\n\n              <div className=\"row banner\">\n                 <div className=\"banner-text\">\n                    <h1 className=\"responsive-headline\">I'm {name}.</h1>\n                    <h3><span>{currentRole}</span>. {description}.</h3>\n                    <hr />\n                    <ul className=\"social\">\n                       {networks}\n                    </ul>\n                 </div>\n              </div>\n\n              <p className=\"scrolldown\">\n                 <a className=\"smoothscroll\" href=\"#about\"><i className=\"icon-down-circle\"></i></a>\n              </p>\n\n           </header>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Components/Header';\n// import Footer from './Components/Footer';\n// import About from './Components/About';\n// import Resume from './Componenets/Resume';\n// import Contact from './Components/Contact';\n// import Portfolio from './Components/Portfolio';\nimport resumeData from './data/resumeData.json';\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            resumeData: resumeData,\n        }\n    }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n          <Header    data={this.state.resumeData.main}/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}